// Code generated by goa v3.2.0, DO NOT EDIT.
//
// payment service
//
// Command:
// $ goa gen fruitshop/design

package payment

import (
	"context"
	paymentviews "fruitshop/gen/payment/views"
)

// The cart service allows to manage the state of the cart
type Service interface {
	// Add implements add.
	Add(context.Context, *AddPayload) (res *PaymentManagement, err error)
	// Get implements get.
	Get(context.Context, *GetPayload) (res *PaymentManagement, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "payment"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"add", "get"}

// AddPayload is the payload type of the payment service add method.
type AddPayload struct {
	// ID of the user
	ID *string
	// userId of the user
	UserID string
	// Total cost of the cart
	Amount float64
}

// PaymentManagement is the result type of the payment service add method.
type PaymentManagement struct {
	// cartId is the unique cart id of the User.
	ID *string
	// userId is the unique id of the User.
	UserID string
	// Amount to be paid for the purchase
	Amount *float64
	// Payment status
	PaymentStatus *string
}

// GetPayload is the payload type of the payment service get method.
type GetPayload struct {
	// cartId
	ID *string
	// userId
	UserID string
}

// NotFound is the type returned when the requested data that does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing data
	ID string
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when the requested data that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return "not_found"
}

// NewPaymentManagement initializes result type PaymentManagement from viewed
// result type PaymentManagement.
func NewPaymentManagement(vres *paymentviews.PaymentManagement) *PaymentManagement {
	return newPaymentManagement(vres.Projected)
}

// NewViewedPaymentManagement initializes viewed result type PaymentManagement
// from result type PaymentManagement using the given view.
func NewViewedPaymentManagement(res *PaymentManagement, view string) *paymentviews.PaymentManagement {
	p := newPaymentManagementView(res)
	return &paymentviews.PaymentManagement{Projected: p, View: "default"}
}

// newPaymentManagement converts projected type PaymentManagement to service
// type PaymentManagement.
func newPaymentManagement(vres *paymentviews.PaymentManagementView) *PaymentManagement {
	res := &PaymentManagement{
		Amount:        vres.Amount,
		PaymentStatus: vres.PaymentStatus,
	}
	if vres.UserID != nil {
		res.UserID = *vres.UserID
	}
	return res
}

// newPaymentManagementView projects result type PaymentManagement to projected
// type PaymentManagementView using the "default" view.
func newPaymentManagementView(res *PaymentManagement) *paymentviews.PaymentManagementView {
	vres := &paymentviews.PaymentManagementView{
		UserID:        &res.UserID,
		Amount:        res.Amount,
		PaymentStatus: res.PaymentStatus,
	}
	return vres
}
