// Code generated by goa v3.1.3, DO NOT EDIT.
//
// user service
//
// Command:
// $ goa gen fruitshop/design

package user

import (
	"context"
	userviews "fruitshop/gen/user/views"
)

// The user service allows access to user members
type Service interface {
	// Add implements add.
	Add(context.Context, *AddPayload) (err error)
	// Get implements get.
	Get(context.Context, *GetPayload) (res *UserManagement, err error)
	// Show implements show.
	Show(context.Context) (res UserManagementCollection, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "user"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"add", "get", "show"}

// AddPayload is the payload type of the user service add method.
type AddPayload struct {
	// UserEmailID
	UserEmailID string
	// User Name
	UserName string
}

// GetPayload is the payload type of the user service get method.
type GetPayload struct {
	// UserEmailID
	UserEmailID string
}

// UserManagement is the result type of the user service get method.
type UserManagement struct {
	// Email ID is the unique id of the User.
	UserEmailID string
	// Name of the User
	UserName string
}

// UserManagementCollection is the result type of the user service show method.
type UserManagementCollection []*UserManagement

// NotFound is the type returned when the requested data that does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing data
	ID string
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when the requested data that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return "not_found"
}

// NewUserManagement initializes result type UserManagement from viewed result
// type UserManagement.
func NewUserManagement(vres *userviews.UserManagement) *UserManagement {
	return newUserManagement(vres.Projected)
}

// NewViewedUserManagement initializes viewed result type UserManagement from
// result type UserManagement using the given view.
func NewViewedUserManagement(res *UserManagement, view string) *userviews.UserManagement {
	p := newUserManagementView(res)
	return &userviews.UserManagement{Projected: p, View: "default"}
}

// NewUserManagementCollection initializes result type UserManagementCollection
// from viewed result type UserManagementCollection.
func NewUserManagementCollection(vres userviews.UserManagementCollection) UserManagementCollection {
	return newUserManagementCollection(vres.Projected)
}

// NewViewedUserManagementCollection initializes viewed result type
// UserManagementCollection from result type UserManagementCollection using the
// given view.
func NewViewedUserManagementCollection(res UserManagementCollection, view string) userviews.UserManagementCollection {
	p := newUserManagementCollectionView(res)
	return userviews.UserManagementCollection{Projected: p, View: "default"}
}

// newUserManagement converts projected type UserManagement to service type
// UserManagement.
func newUserManagement(vres *userviews.UserManagementView) *UserManagement {
	res := &UserManagement{}
	if vres.UserEmailID != nil {
		res.UserEmailID = *vres.UserEmailID
	}
	if vres.UserName != nil {
		res.UserName = *vres.UserName
	}
	return res
}

// newUserManagementView projects result type UserManagement to projected type
// UserManagementView using the "default" view.
func newUserManagementView(res *UserManagement) *userviews.UserManagementView {
	vres := &userviews.UserManagementView{
		UserEmailID: &res.UserEmailID,
		UserName:    &res.UserName,
	}
	return vres
}

// newUserManagementCollection converts projected type UserManagementCollection
// to service type UserManagementCollection.
func newUserManagementCollection(vres userviews.UserManagementCollectionView) UserManagementCollection {
	res := make(UserManagementCollection, len(vres))
	for i, n := range vres {
		res[i] = newUserManagement(n)
	}
	return res
}

// newUserManagementCollectionView projects result type
// UserManagementCollection to projected type UserManagementCollectionView
// using the "default" view.
func newUserManagementCollectionView(res UserManagementCollection) userviews.UserManagementCollectionView {
	vres := make(userviews.UserManagementCollectionView, len(res))
	for i, n := range res {
		vres[i] = newUserManagementView(n)
	}
	return vres
}
