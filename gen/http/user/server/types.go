// Code generated by goa v3.1.3, DO NOT EDIT.
//
// user HTTP server types
//
// Command:
// $ goa gen fruitshop/design

package server

import (
	user "fruitshop/gen/user"
	userviews "fruitshop/gen/user/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "user" service "add" endpoint HTTP request
// body.
type AddRequestBody struct {
	// User Name
	UserName *string `form:"UserName,omitempty" json:"UserName,omitempty" xml:"UserName,omitempty"`
}

// GetResponseBody is the type of the "user" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Email ID is the unique id of the User.
	UserEmailID string `form:"UserEmailID" json:"UserEmailID" xml:"UserEmailID"`
	// Name of the User
	UserName string `form:"UserName" json:"UserName" xml:"UserName"`
}

// UserManagementResponseCollection is the type of the "user" service "show"
// endpoint HTTP response body.
type UserManagementResponseCollection []*UserManagementResponse

// UserManagementResponse is used to define fields on response body types.
type UserManagementResponse struct {
	// Email ID is the unique id of the User.
	UserEmailID string `form:"UserEmailID" json:"UserEmailID" xml:"UserEmailID"`
	// Name of the User
	UserName string `form:"UserName" json:"UserName" xml:"UserName"`
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "user" service.
func NewGetResponseBody(res *userviews.UserManagementView) *GetResponseBody {
	body := &GetResponseBody{
		UserEmailID: *res.UserEmailID,
		UserName:    *res.UserName,
	}
	return body
}

// NewUserManagementResponseCollection builds the HTTP response body from the
// result of the "show" endpoint of the "user" service.
func NewUserManagementResponseCollection(res userviews.UserManagementCollectionView) UserManagementResponseCollection {
	body := make([]*UserManagementResponse, len(res))
	for i, val := range res {
		body[i] = marshalUserviewsUserManagementViewToUserManagementResponse(val)
	}
	return body
}

// NewAddPayload builds a user service add endpoint payload.
func NewAddPayload(body *AddRequestBody, userEmailID string) *user.AddPayload {
	v := &user.AddPayload{
		UserName: *body.UserName,
	}
	v.UserEmailID = userEmailID

	return v
}

// NewGetPayload builds a user service get endpoint payload.
func NewGetPayload(userEmailID string) *user.GetPayload {
	v := &user.GetPayload{}
	v.UserEmailID = userEmailID

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("UserName", "body"))
	}
	return
}
