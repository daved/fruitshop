// Code generated by goa v3.2.0, DO NOT EDIT.
//
// discount HTTP client encoders and decoders
//
// Command:
// $ goa gen fruitshop/design

package client

import (
	"bytes"
	"context"
	discount "fruitshop/gen/discount"
	discountviews "fruitshop/gen/discount/views"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "discount" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		userID string
	)
	{
		p, ok := v.(*discount.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("discount", "get", "*discount.GetPayload", v)
		}
		userID = p.UserID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetDiscountPath(userID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("discount", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetResponse returns a decoder for responses returned by the discount
// get endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("discount", "get", err)
			}
			p := NewGetDiscountManagementCollectionOK(body)
			view := "default"
			vres := discountviews.DiscountManagementCollection{Projected: p, View: view}
			if err = discountviews.ValidateDiscountManagementCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("discount", "get", err)
			}
			res := discount.NewDiscountManagementCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("discount", "get", resp.StatusCode, string(body))
		}
	}
}

// unmarshalDiscountManagementResponseToDiscountviewsDiscountManagementView
// builds a value of type *discountviews.DiscountManagementView from a value of
// type *DiscountManagementResponse.
func unmarshalDiscountManagementResponseToDiscountviewsDiscountManagementView(v *DiscountManagementResponse) *discountviews.DiscountManagementView {
	res := &discountviews.DiscountManagementView{
		UserID: v.UserID,
		Name:   v.Name,
		Status: v.Status,
	}

	return res
}
