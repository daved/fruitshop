// Code generated by goa v3.1.3, DO NOT EDIT.
//
// fruitshop HTTP client CLI support package
//
// Command:
// $ goa gen fruitshop/design

package cli

import (
	"flag"
	"fmt"
	cartc "fruitshop/gen/http/cart/client"
	fruitc "fruitshop/gen/http/fruit/client"
	userc "fruitshop/gen/http/user/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `user (add|get|show)
fruit (get|show)
cart (add|get)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` user add --body '{
      "UserName": "Placeat adipisci optio non."
   }' --id "Neque esse ut."` + "\n" +
		os.Args[0] + ` fruit get --name "Natus nemo nisi voluptate sint voluptas."` + "\n" +
		os.Args[0] + ` cart add --body '{
      "Count": 4044866562136685344,
      "Name": "Ullam est harum molestiae non."
   }' --cart-id "Est nemo."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		userAddBodyFlag = userAddFlags.String("body", "REQUIRED", "")
		userAddIDFlag   = userAddFlags.String("id", "REQUIRED", "ID")

		userGetFlags  = flag.NewFlagSet("get", flag.ExitOnError)
		userGetIDFlag = userGetFlags.String("id", "REQUIRED", "ID")

		userShowFlags = flag.NewFlagSet("show", flag.ExitOnError)

		fruitFlags = flag.NewFlagSet("fruit", flag.ContinueOnError)

		fruitGetFlags    = flag.NewFlagSet("get", flag.ExitOnError)
		fruitGetNameFlag = fruitGetFlags.String("name", "REQUIRED", "Name")

		fruitShowFlags = flag.NewFlagSet("show", flag.ExitOnError)

		cartFlags = flag.NewFlagSet("cart", flag.ContinueOnError)

		cartAddFlags      = flag.NewFlagSet("add", flag.ExitOnError)
		cartAddBodyFlag   = cartAddFlags.String("body", "REQUIRED", "")
		cartAddCartIDFlag = cartAddFlags.String("cart-id", "REQUIRED", "cartId of the user")

		cartGetFlags      = flag.NewFlagSet("get", flag.ExitOnError)
		cartGetCartIDFlag = cartGetFlags.String("cart-id", "REQUIRED", "cartId")
	)
	userFlags.Usage = userUsage
	userAddFlags.Usage = userAddUsage
	userGetFlags.Usage = userGetUsage
	userShowFlags.Usage = userShowUsage

	fruitFlags.Usage = fruitUsage
	fruitGetFlags.Usage = fruitGetUsage
	fruitShowFlags.Usage = fruitShowUsage

	cartFlags.Usage = cartUsage
	cartAddFlags.Usage = cartAddUsage
	cartGetFlags.Usage = cartGetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "user":
			svcf = userFlags
		case "fruit":
			svcf = fruitFlags
		case "cart":
			svcf = cartFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "user":
			switch epn {
			case "add":
				epf = userAddFlags

			case "get":
				epf = userGetFlags

			case "show":
				epf = userShowFlags

			}

		case "fruit":
			switch epn {
			case "get":
				epf = fruitGetFlags

			case "show":
				epf = fruitShowFlags

			}

		case "cart":
			switch epn {
			case "add":
				epf = cartAddFlags

			case "get":
				epf = cartGetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add":
				endpoint = c.Add()
				data, err = userc.BuildAddPayload(*userAddBodyFlag, *userAddIDFlag)
			case "get":
				endpoint = c.Get()
				data, err = userc.BuildGetPayload(*userGetIDFlag)
			case "show":
				endpoint = c.Show()
				data = nil
			}
		case "fruit":
			c := fruitc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = fruitc.BuildGetPayload(*fruitGetNameFlag)
			case "show":
				endpoint = c.Show()
				data = nil
			}
		case "cart":
			c := cartc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add":
				endpoint = c.Add()
				data, err = cartc.BuildAddPayload(*cartAddBodyFlag, *cartAddCartIDFlag)
			case "get":
				endpoint = c.Get()
				data, err = cartc.BuildGetPayload(*cartGetCartIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `The user service allows access to user members
Usage:
    %s [globalflags] user COMMAND [flags]

COMMAND:
    add: Add implements add.
    get: Get implements get.
    show: Show implements show.

Additional help:
    %s user COMMAND --help
`, os.Args[0], os.Args[0])
}
func userAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user add -body JSON -id STRING

Add implements add.
    -body JSON: 
    -id STRING: ID

Example:
    `+os.Args[0]+` user add --body '{
      "UserName": "Placeat adipisci optio non."
   }' --id "Neque esse ut."
`, os.Args[0])
}

func userGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get -id STRING

Get implements get.
    -id STRING: ID

Example:
    `+os.Args[0]+` user get --id "Delectus et minima voluptate et vel."
`, os.Args[0])
}

func userShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user show

Show implements show.

Example:
    `+os.Args[0]+` user show
`, os.Args[0])
}

// fruitUsage displays the usage of the fruit command and its subcommands.
func fruitUsage() {
	fmt.Fprintf(os.Stderr, `The user service allows access to fruits
Usage:
    %s [globalflags] fruit COMMAND [flags]

COMMAND:
    get: Get implements get.
    show: Show implements show.

Additional help:
    %s fruit COMMAND --help
`, os.Args[0], os.Args[0])
}
func fruitGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fruit get -name STRING

Get implements get.
    -name STRING: Name

Example:
    `+os.Args[0]+` fruit get --name "Natus nemo nisi voluptate sint voluptas."
`, os.Args[0])
}

func fruitShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fruit show

Show implements show.

Example:
    `+os.Args[0]+` fruit show
`, os.Args[0])
}

// cartUsage displays the usage of the cart command and its subcommands.
func cartUsage() {
	fmt.Fprintf(os.Stderr, `The cart service allows to manage the state of the cart
Usage:
    %s [globalflags] cart COMMAND [flags]

COMMAND:
    add: Add implements add.
    get: Get implements get.

Additional help:
    %s cart COMMAND --help
`, os.Args[0], os.Args[0])
}
func cartAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] cart add -body JSON -cart-id STRING

Add implements add.
    -body JSON: 
    -cart-id STRING: cartId of the user

Example:
    `+os.Args[0]+` cart add --body '{
      "Count": 4044866562136685344,
      "Name": "Ullam est harum molestiae non."
   }' --cart-id "Est nemo."
`, os.Args[0])
}

func cartGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] cart get -cart-id STRING

Get implements get.
    -cart-id STRING: cartId

Example:
    `+os.Args[0]+` cart get --cart-id "Incidunt quae quia officia rerum est."
`, os.Args[0])
}
