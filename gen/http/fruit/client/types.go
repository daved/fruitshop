// Code generated by goa v3.1.3, DO NOT EDIT.
//
// fruit HTTP client types
//
// Command:
// $ goa gen fruitshop/design

package client

import (
	fruitviews "fruitshop/gen/fruit/views"

	goa "goa.design/goa/v3/pkg"
)

// GetResponseBody is the type of the "fruit" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Name is the unique Name of the Fruit.
	Name *string `form:"Name,omitempty" json:"Name,omitempty" xml:"Name,omitempty"`
}

// ShowResponseBody is the type of the "fruit" service "show" endpoint HTTP
// response body.
type ShowResponseBody []*FruitManagementResponse

// FruitManagementResponse is used to define fields on response body types.
type FruitManagementResponse struct {
	// Name is the unique Name of the Fruit.
	Name *string `form:"Name,omitempty" json:"Name,omitempty" xml:"Name,omitempty"`
}

// NewGetFruitManagementOK builds a "fruit" service "get" endpoint result from
// a HTTP "OK" response.
func NewGetFruitManagementOK(body *GetResponseBody) *fruitviews.FruitManagementView {
	v := &fruitviews.FruitManagementView{
		Name: body.Name,
	}

	return v
}

// NewShowFruitManagementCollectionOK builds a "fruit" service "show" endpoint
// result from a HTTP "OK" response.
func NewShowFruitManagementCollectionOK(body ShowResponseBody) fruitviews.FruitManagementCollectionView {
	v := make([]*fruitviews.FruitManagementView, len(body))
	for i, val := range body {
		v[i] = unmarshalFruitManagementResponseToFruitviewsFruitManagementView(val)
	}
	return v
}

// ValidateFruitManagementResponse runs the validations defined on
// FruitManagementResponse
func ValidateFruitManagementResponse(body *FruitManagementResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Name", "body"))
	}
	return
}
