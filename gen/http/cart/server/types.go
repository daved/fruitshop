// Code generated by goa v3.1.3, DO NOT EDIT.
//
// cart HTTP server types
//
// Command:
// $ goa gen fruitshop/design

package server

import (
	cart "fruitshop/gen/cart"
	cartviews "fruitshop/gen/cart/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "cart" service "add" endpoint HTTP request
// body.
type AddRequestBody struct {
	// name of the fruit
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Number of fruits
	Count *int `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// Cost of fruits
	CostPerItem *float64 `form:"costPerItem,omitempty" json:"costPerItem,omitempty" xml:"costPerItem,omitempty"`
	// Total cost for the item
	TotalCost *float64 `form:"totalCost,omitempty" json:"totalCost,omitempty" xml:"totalCost,omitempty"`
}

// RemoveRequestBody is the type of the "cart" service "remove" endpoint HTTP
// request body.
type RemoveRequestBody struct {
	// Name of the fruit
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Number of fruits
	Count *int `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// Cost of fruits
	CostPerItem *float64 `form:"costPerItem,omitempty" json:"costPerItem,omitempty" xml:"costPerItem,omitempty"`
	// Total cost for the item
	TotalCost *float64 `form:"totalCost,omitempty" json:"totalCost,omitempty" xml:"totalCost,omitempty"`
}

// CartManagementResponseCollection is the type of the "cart" service "get"
// endpoint HTTP response body.
type CartManagementResponseCollection []*CartManagementResponse

// CartManagementResponse is used to define fields on response body types.
type CartManagementResponse struct {
	// userId is the unique id of the Cart.
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Name of the fruit
	Name string `form:"name" json:"name" xml:"name"`
	// Number of fruits
	Count int `form:"count" json:"count" xml:"count"`
	// Cost of Each fruit
	CostPerItem float64 `form:"costPerItem" json:"costPerItem" xml:"costPerItem"`
	// Total cost of fruits
	TotalCost float64 `form:"totalCost" json:"totalCost" xml:"totalCost"`
}

// NewCartManagementResponseCollection builds the HTTP response body from the
// result of the "get" endpoint of the "cart" service.
func NewCartManagementResponseCollection(res cartviews.CartManagementCollectionView) CartManagementResponseCollection {
	body := make([]*CartManagementResponse, len(res))
	for i, val := range res {
		body[i] = marshalCartviewsCartManagementViewToCartManagementResponse(val)
	}
	return body
}

// NewAddPayload builds a cart service add endpoint payload.
func NewAddPayload(body *AddRequestBody, userID string) *cart.AddPayload {
	v := &cart.AddPayload{
		Name:        *body.Name,
		Count:       *body.Count,
		CostPerItem: body.CostPerItem,
		TotalCost:   body.TotalCost,
	}
	v.UserID = userID

	return v
}

// NewRemovePayload builds a cart service remove endpoint payload.
func NewRemovePayload(body *RemoveRequestBody, userID string) *cart.RemovePayload {
	v := &cart.RemovePayload{
		Name:        *body.Name,
		Count:       *body.Count,
		CostPerItem: body.CostPerItem,
		TotalCost:   body.TotalCost,
	}
	v.UserID = userID

	return v
}

// NewGetPayload builds a cart service get endpoint payload.
func NewGetPayload(userID string) *cart.GetPayload {
	v := &cart.GetPayload{}
	v.UserID = userID

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count", "body"))
	}
	return
}

// ValidateRemoveRequestBody runs the validations defined on RemoveRequestBody
func ValidateRemoveRequestBody(body *RemoveRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count", "body"))
	}
	return
}
