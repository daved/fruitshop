// Code generated by goa v3.1.3, DO NOT EDIT.
//
// cart HTTP client CLI support package
//
// Command:
// $ goa gen fruitshop/design

package client

import (
	"encoding/json"
	"fmt"
	cart "fruitshop/gen/cart"
)

// BuildAddPayload builds the payload for the cart add endpoint from CLI flags.
func BuildAddPayload(cartAddBody string, cartAddCartID string) (*cart.AddPayload, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(cartAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"CostPerItem\": 0.13577958339601065,\n      \"Count\": 6768872129112107149,\n      \"Name\": \"Saepe eligendi sint vitae officiis officiis et.\",\n      \"TotalCost\": 0.4703888278036248\n   }'")
		}
	}
	var cartID string
	{
		cartID = cartAddCartID
	}
	v := &cart.AddPayload{
		Name:        body.Name,
		Count:       body.Count,
		CostPerItem: body.CostPerItem,
		TotalCost:   body.TotalCost,
	}
	v.CartID = cartID

	return v, nil
}

// BuildRemovePayload builds the payload for the cart remove endpoint from CLI
// flags.
func BuildRemovePayload(cartRemoveBody string, cartRemoveCartID string) (*cart.RemovePayload, error) {
	var err error
	var body RemoveRequestBody
	{
		err = json.Unmarshal([]byte(cartRemoveBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"CostPerItem\": 0.31933437727177916,\n      \"Count\": 8317691352667182512,\n      \"Name\": \"Rem voluptatem dolor voluptatem esse perspiciatis delectus.\",\n      \"TotalCost\": 0.9110304979788784\n   }'")
		}
	}
	var cartID string
	{
		cartID = cartRemoveCartID
	}
	v := &cart.RemovePayload{
		Name:        body.Name,
		Count:       body.Count,
		CostPerItem: body.CostPerItem,
		TotalCost:   body.TotalCost,
	}
	v.CartID = cartID

	return v, nil
}

// BuildGetPayload builds the payload for the cart get endpoint from CLI flags.
func BuildGetPayload(cartGetCartID string) (*cart.GetPayload, error) {
	var cartID string
	{
		cartID = cartGetCartID
	}
	v := &cart.GetPayload{}
	v.CartID = cartID

	return v, nil
}
