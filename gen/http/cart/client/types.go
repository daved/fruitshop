// Code generated by goa v3.1.3, DO NOT EDIT.
//
// cart HTTP client types
//
// Command:
// $ goa gen fruitshop/design

package client

import (
	cart "fruitshop/gen/cart"
	cartviews "fruitshop/gen/cart/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "cart" service "add" endpoint HTTP request
// body.
type AddRequestBody struct {
	// Name of the fruit
	Name string `form:"Name" json:"Name" xml:"Name"`
	// Number of fruits
	Count int `form:"Count" json:"Count" xml:"Count"`
}

// GetResponseBody is the type of the "cart" service "get" endpoint HTTP
// response body.
type GetResponseBody []*CartManagementResponse

// CartManagementResponse is used to define fields on response body types.
type CartManagementResponse struct {
	// cartId is the unique id of the User.
	CartID *string `form:"cartId,omitempty" json:"cartId,omitempty" xml:"cartId,omitempty"`
	// Name of the fruit
	Name *string `form:"Name,omitempty" json:"Name,omitempty" xml:"Name,omitempty"`
	// Number of fruits
	Count *int `form:"Count,omitempty" json:"Count,omitempty" xml:"Count,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "cart" service.
func NewAddRequestBody(p *cart.AddPayload) *AddRequestBody {
	body := &AddRequestBody{
		Name:  p.Name,
		Count: p.Count,
	}
	return body
}

// NewGetCartManagementCollectionOK builds a "cart" service "get" endpoint
// result from a HTTP "OK" response.
func NewGetCartManagementCollectionOK(body GetResponseBody) cartviews.CartManagementCollectionView {
	v := make([]*cartviews.CartManagementView, len(body))
	for i, val := range body {
		v[i] = unmarshalCartManagementResponseToCartviewsCartManagementView(val)
	}
	return v
}

// ValidateCartManagementResponse runs the validations defined on
// CartManagementResponse
func ValidateCartManagementResponse(body *CartManagementResponse) (err error) {
	if body.CartID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cartId", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Name", "body"))
	}
	if body.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Count", "body"))
	}
	return
}
