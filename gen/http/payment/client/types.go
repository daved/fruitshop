// Code generated by goa v3.1.3, DO NOT EDIT.
//
// payment HTTP client types
//
// Command:
// $ goa gen fruitshop/design

package client

import (
	payment "fruitshop/gen/payment"
	paymentviews "fruitshop/gen/payment/views"
)

// AddRequestBody is the type of the "payment" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// cartId of the user
	CartID string `form:"cartId" json:"cartId" xml:"cartId"`
	// Total cost of the cart
	Amount float64 `form:"Amount" json:"Amount" xml:"Amount"`
}

// AddResponseBody is the type of the "payment" service "add" endpoint HTTP
// response body.
type AddResponseBody struct {
	// cartId is the unique cart id of the User.
	ID *string `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// cartId is the unique cart id of the User.
	CartID *string `form:"cartId,omitempty" json:"cartId,omitempty" xml:"cartId,omitempty"`
	// Amount to be paid for the purchase
	Amount *float64 `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Payment status
	PaymentStatus *string `form:"PaymentStatus,omitempty" json:"PaymentStatus,omitempty" xml:"PaymentStatus,omitempty"`
}

// GetResponseBody is the type of the "payment" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// cartId is the unique cart id of the User.
	ID *string `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// cartId is the unique cart id of the User.
	CartID *string `form:"cartId,omitempty" json:"cartId,omitempty" xml:"cartId,omitempty"`
	// Amount to be paid for the purchase
	Amount *float64 `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Payment status
	PaymentStatus *string `form:"PaymentStatus,omitempty" json:"PaymentStatus,omitempty" xml:"PaymentStatus,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "payment" service.
func NewAddRequestBody(p *payment.AddPayload) *AddRequestBody {
	body := &AddRequestBody{
		CartID: p.CartID,
		Amount: p.Amount,
	}
	return body
}

// NewAddPaymentManagementAccepted builds a "payment" service "add" endpoint
// result from a HTTP "Accepted" response.
func NewAddPaymentManagementAccepted(body *AddResponseBody) *paymentviews.PaymentManagementView {
	v := &paymentviews.PaymentManagementView{
		ID:            body.ID,
		CartID:        body.CartID,
		Amount:        body.Amount,
		PaymentStatus: body.PaymentStatus,
	}

	return v
}

// NewGetPaymentManagementOK builds a "payment" service "get" endpoint result
// from a HTTP "OK" response.
func NewGetPaymentManagementOK(body *GetResponseBody) *paymentviews.PaymentManagementView {
	v := &paymentviews.PaymentManagementView{
		ID:            body.ID,
		CartID:        body.CartID,
		Amount:        body.Amount,
		PaymentStatus: body.PaymentStatus,
	}

	return v
}
