// Code generated by goa v3.2.0, DO NOT EDIT.
//
// discount service
//
// Command:
// $ goa gen fruitshop/design

package discount

import (
	"context"
	discountviews "fruitshop/frontend/gen/discount/views"
)

// Discounts applied on the cart
type Service interface {
	// Get implements get.
	Get(context.Context, *GetPayload) (res DiscountManagementCollection, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "discount"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"get"}

// GetPayload is the payload type of the discount service get method.
type GetPayload struct {
	// userId
	UserID string
}

// DiscountManagementCollection is the result type of the discount service get
// method.
type DiscountManagementCollection []*DiscountManagement

// A DiscountManagement type describes the discounts applied on the cart
type DiscountManagement struct {
	// userId for the customer
	UserID string
	// Name of the discount
	Name *string
	// Status of the discount
	Status *string
}

// NotFound is the type returned when the requested data that does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing data
	ID string
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when the requested data that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return "not_found"
}

// NewDiscountManagementCollection initializes result type
// DiscountManagementCollection from viewed result type
// DiscountManagementCollection.
func NewDiscountManagementCollection(vres discountviews.DiscountManagementCollection) DiscountManagementCollection {
	return newDiscountManagementCollection(vres.Projected)
}

// NewViewedDiscountManagementCollection initializes viewed result type
// DiscountManagementCollection from result type DiscountManagementCollection
// using the given view.
func NewViewedDiscountManagementCollection(res DiscountManagementCollection, view string) discountviews.DiscountManagementCollection {
	p := newDiscountManagementCollectionView(res)
	return discountviews.DiscountManagementCollection{Projected: p, View: "default"}
}

// newDiscountManagementCollection converts projected type
// DiscountManagementCollection to service type DiscountManagementCollection.
func newDiscountManagementCollection(vres discountviews.DiscountManagementCollectionView) DiscountManagementCollection {
	res := make(DiscountManagementCollection, len(vres))
	for i, n := range vres {
		res[i] = newDiscountManagement(n)
	}
	return res
}

// newDiscountManagementCollectionView projects result type
// DiscountManagementCollection to projected type
// DiscountManagementCollectionView using the "default" view.
func newDiscountManagementCollectionView(res DiscountManagementCollection) discountviews.DiscountManagementCollectionView {
	vres := make(discountviews.DiscountManagementCollectionView, len(res))
	for i, n := range res {
		vres[i] = newDiscountManagementView(n)
	}
	return vres
}

// newDiscountManagement converts projected type DiscountManagement to service
// type DiscountManagement.
func newDiscountManagement(vres *discountviews.DiscountManagementView) *DiscountManagement {
	res := &DiscountManagement{
		Name:   vres.Name,
		Status: vres.Status,
	}
	if vres.UserID != nil {
		res.UserID = *vres.UserID
	}
	return res
}

// newDiscountManagementView projects result type DiscountManagement to
// projected type DiscountManagementView using the "default" view.
func newDiscountManagementView(res *DiscountManagement) *discountviews.DiscountManagementView {
	vres := &discountviews.DiscountManagementView{
		UserID: &res.UserID,
		Name:   res.Name,
		Status: res.Status,
	}
	return vres
}
