// Code generated by goa v3.2.0, DO NOT EDIT.
//
// cart HTTP client types
//
// Command:
// $ goa gen fruitshop/design

package client

import (
	cart "fruitshop/frontend/gen/cart"
	cartviews "fruitshop/frontend/gen/cart/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "cart" service "add" endpoint HTTP request
// body.
type AddRequestBody struct {
	// name of the fruit
	Name string `form:"name" json:"name" xml:"name"`
	// Number of fruits
	Count int `form:"count" json:"count" xml:"count"`
	// Cost of fruits
	CostPerItem *float64 `form:"costPerItem,omitempty" json:"costPerItem,omitempty" xml:"costPerItem,omitempty"`
	// Total cost for the item
	TotalCost *float64 `form:"totalCost,omitempty" json:"totalCost,omitempty" xml:"totalCost,omitempty"`
}

// RemoveRequestBody is the type of the "cart" service "remove" endpoint HTTP
// request body.
type RemoveRequestBody struct {
	// Name of the fruit
	Name string `form:"name" json:"name" xml:"name"`
	// Number of fruits
	Count int `form:"count" json:"count" xml:"count"`
	// Cost of fruits
	CostPerItem *float64 `form:"costPerItem,omitempty" json:"costPerItem,omitempty" xml:"costPerItem,omitempty"`
	// Total cost for the item
	TotalCost *float64 `form:"totalCost,omitempty" json:"totalCost,omitempty" xml:"totalCost,omitempty"`
}

// GetResponseBody is the type of the "cart" service "get" endpoint HTTP
// response body.
type GetResponseBody []*CartManagementResponse

// CartManagementResponse is used to define fields on response body types.
type CartManagementResponse struct {
	// userId is the unique id of the Cart.
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Name of the fruit
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Number of fruits
	Count *int `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// Cost of Each fruit
	CostPerItem *float64 `form:"costPerItem,omitempty" json:"costPerItem,omitempty" xml:"costPerItem,omitempty"`
	// Total cost of fruits
	TotalCost *float64 `form:"totalCost,omitempty" json:"totalCost,omitempty" xml:"totalCost,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "cart" service.
func NewAddRequestBody(p *cart.AddPayload) *AddRequestBody {
	body := &AddRequestBody{
		Name:        p.Name,
		Count:       p.Count,
		CostPerItem: p.CostPerItem,
		TotalCost:   p.TotalCost,
	}
	return body
}

// NewRemoveRequestBody builds the HTTP request body from the payload of the
// "remove" endpoint of the "cart" service.
func NewRemoveRequestBody(p *cart.RemovePayload) *RemoveRequestBody {
	body := &RemoveRequestBody{
		Name:        p.Name,
		Count:       p.Count,
		CostPerItem: p.CostPerItem,
		TotalCost:   p.TotalCost,
	}
	return body
}

// NewGetCartManagementCollectionOK builds a "cart" service "get" endpoint
// result from a HTTP "OK" response.
func NewGetCartManagementCollectionOK(body GetResponseBody) cartviews.CartManagementCollectionView {
	v := make([]*cartviews.CartManagementView, len(body))
	for i, val := range body {
		v[i] = unmarshalCartManagementResponseToCartviewsCartManagementView(val)
	}
	return v
}

// ValidateCartManagementResponse runs the validations defined on
// CartManagementResponse
func ValidateCartManagementResponse(body *CartManagementResponse) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count", "body"))
	}
	if body.CostPerItem == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("costPerItem", "body"))
	}
	if body.TotalCost == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("totalCost", "body"))
	}
	return
}
