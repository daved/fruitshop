// Code generated by goa v3.2.0, DO NOT EDIT.
//
// fruit HTTP client encoders and decoders
//
// Command:
// $ goa gen fruitshop/design

package client

import (
	"bytes"
	"context"
	fruit "fruitshop/frontend/gen/fruit"
	fruitviews "fruitshop/frontend/gen/fruit/views"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "fruit" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		name string
	)
	{
		p, ok := v.(*fruit.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("fruit", "get", "*fruit.GetPayload", v)
		}
		name = p.Name
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetFruitPath(name)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("fruit", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the fruit get
// server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*fruit.GetPayload)
		if !ok {
			return goahttp.ErrInvalidType("fruit", "get", "*fruit.GetPayload", v)
		}
		body := NewGetRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("fruit", "get", err)
		}
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the fruit get
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fruit", "get", err)
			}
			p := NewGetFruitManagementOK(&body)
			view := "default"
			vres := &fruitviews.FruitManagement{Projected: p, View: view}
			if err = fruitviews.ValidateFruitManagement(vres); err != nil {
				return nil, goahttp.ErrValidationError("fruit", "get", err)
			}
			res := fruit.NewFruitManagement(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("fruit", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "fruit" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowFruitPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("fruit", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeShowResponse returns a decoder for responses returned by the fruit
// show endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fruit", "show", err)
			}
			p := NewShowFruitManagementCollectionOK(body)
			view := "default"
			vres := fruitviews.FruitManagementCollection{Projected: p, View: view}
			if err = fruitviews.ValidateFruitManagementCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("fruit", "show", err)
			}
			res := fruit.NewFruitManagementCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("fruit", "show", resp.StatusCode, string(body))
		}
	}
}

// unmarshalFruitManagementResponseToFruitviewsFruitManagementView builds a
// value of type *fruitviews.FruitManagementView from a value of type
// *FruitManagementResponse.
func unmarshalFruitManagementResponseToFruitviewsFruitManagementView(v *FruitManagementResponse) *fruitviews.FruitManagementView {
	res := &fruitviews.FruitManagementView{
		Name: v.Name,
		Cost: v.Cost,
	}

	return res
}
