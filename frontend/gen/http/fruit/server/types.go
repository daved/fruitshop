// Code generated by goa v3.2.0, DO NOT EDIT.
//
// fruit HTTP server types
//
// Command:
// $ goa gen fruitshop/design

package server

import (
	fruit "fruitshop/frontend/gen/fruit"
	fruitviews "fruitshop/frontend/gen/fruit/views"

	goa "goa.design/goa/v3/pkg"
)

// GetRequestBody is the type of the "fruit" service "get" endpoint HTTP
// request body.
type GetRequestBody struct {
	// cost
	Cost *float64 `form:"cost,omitempty" json:"cost,omitempty" xml:"cost,omitempty"`
}

// GetResponseBody is the type of the "fruit" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Name is the unique Name of the Fruit.
	Name string `form:"name" json:"name" xml:"name"`
	// Cost of the Fruit.
	Cost float64 `form:"cost" json:"cost" xml:"cost"`
}

// FruitManagementResponseCollection is the type of the "fruit" service "show"
// endpoint HTTP response body.
type FruitManagementResponseCollection []*FruitManagementResponse

// FruitManagementResponse is used to define fields on response body types.
type FruitManagementResponse struct {
	// Name is the unique Name of the Fruit.
	Name string `form:"name" json:"name" xml:"name"`
	// Cost of the Fruit.
	Cost float64 `form:"cost" json:"cost" xml:"cost"`
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "fruit" service.
func NewGetResponseBody(res *fruitviews.FruitManagementView) *GetResponseBody {
	body := &GetResponseBody{
		Name: *res.Name,
		Cost: *res.Cost,
	}
	return body
}

// NewFruitManagementResponseCollection builds the HTTP response body from the
// result of the "show" endpoint of the "fruit" service.
func NewFruitManagementResponseCollection(res fruitviews.FruitManagementCollectionView) FruitManagementResponseCollection {
	body := make([]*FruitManagementResponse, len(res))
	for i, val := range res {
		body[i] = marshalFruitviewsFruitManagementViewToFruitManagementResponse(val)
	}
	return body
}

// NewGetPayload builds a fruit service get endpoint payload.
func NewGetPayload(body *GetRequestBody, name string) *fruit.GetPayload {
	v := &fruit.GetPayload{
		Cost: *body.Cost,
	}
	v.Name = name

	return v
}

// ValidateGetRequestBody runs the validations defined on GetRequestBody
func ValidateGetRequestBody(body *GetRequestBody) (err error) {
	if body.Cost == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cost", "body"))
	}
	return
}
