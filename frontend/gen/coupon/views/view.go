// Code generated by goa v3.2.0, DO NOT EDIT.
//
// coupon views
//
// Command:
// $ goa gen fruitshop/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// CouponManagement is the viewed result type that is projected based on a view.
type CouponManagement struct {
	// Type to project
	Projected *CouponManagementView
	// View to render
	View string
}

// CouponManagementView is a type that runs validations on a projected type.
type CouponManagementView struct {
	// ID is the unique id of the User.
	UserID *string
	// ID is the unique id of the Users coupon.
	ID *string
	// Name of the coupon.
	Name *string
	// status of  Users coupon.
	Status *string
	// Users coupon created date time
	CreateTime *string
}

var (
	// CouponManagementMap is a map of attribute names in result type
	// CouponManagement indexed by view name.
	CouponManagementMap = map[string][]string{
		"default": []string{
			"userId",
		},
	}
)

// ValidateCouponManagement runs the validations defined on the viewed result
// type CouponManagement.
func ValidateCouponManagement(result *CouponManagement) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCouponManagementView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateCouponManagementView runs the validations defined on
// CouponManagementView using the "default" view.
func ValidateCouponManagementView(result *CouponManagementView) (err error) {
	if result.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "result"))
	}
	return
}
