// Code generated by goa v3.2.0, DO NOT EDIT.
//
// payment HTTP server types
//
// Command:
// $ goa gen fruitshop/design

package server

import (
	payment "fruitshop/gen/payment"
	paymentviews "fruitshop/gen/payment/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "payment" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// ID of the user
	ID *string `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Total cost of the cart
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
}

// GetRequestBody is the type of the "payment" service "get" endpoint HTTP
// request body.
type GetRequestBody struct {
	// cartId
	ID *string `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
}

// AddResponseBody is the type of the "payment" service "add" endpoint HTTP
// response body.
type AddResponseBody struct {
	// userId is the unique id of the User.
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Amount to be paid for the purchase
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// Payment status
	PaymentStatus *string `form:"paymentStatus,omitempty" json:"paymentStatus,omitempty" xml:"paymentStatus,omitempty"`
}

// GetResponseBody is the type of the "payment" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// userId is the unique id of the User.
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Amount to be paid for the purchase
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// Payment status
	PaymentStatus *string `form:"paymentStatus,omitempty" json:"paymentStatus,omitempty" xml:"paymentStatus,omitempty"`
}

// NewAddResponseBody builds the HTTP response body from the result of the
// "add" endpoint of the "payment" service.
func NewAddResponseBody(res *paymentviews.PaymentManagementView) *AddResponseBody {
	body := &AddResponseBody{
		UserID:        *res.UserID,
		Amount:        res.Amount,
		PaymentStatus: res.PaymentStatus,
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "payment" service.
func NewGetResponseBody(res *paymentviews.PaymentManagementView) *GetResponseBody {
	body := &GetResponseBody{
		UserID:        *res.UserID,
		Amount:        res.Amount,
		PaymentStatus: res.PaymentStatus,
	}
	return body
}

// NewAddPayload builds a payment service add endpoint payload.
func NewAddPayload(body *AddRequestBody, userID string) *payment.AddPayload {
	v := &payment.AddPayload{
		ID:     body.ID,
		Amount: *body.Amount,
	}
	v.UserID = userID

	return v
}

// NewGetPayload builds a payment service get endpoint payload.
func NewGetPayload(body *GetRequestBody, userID string) *payment.GetPayload {
	v := &payment.GetPayload{
		ID: body.ID,
	}
	v.UserID = userID

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	return
}
