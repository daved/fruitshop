// Code generated by goa v3.2.0, DO NOT EDIT.
//
// payment views
//
// Command:
// $ goa gen fruitshop/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// PaymentManagement is the viewed result type that is projected based on a
// view.
type PaymentManagement struct {
	// Type to project
	Projected *PaymentManagementView
	// View to render
	View string
}

// PaymentManagementView is a type that runs validations on a projected type.
type PaymentManagementView struct {
	// cartId is the unique cart id of the User.
	ID *string
	// userId is the unique id of the User.
	UserID *string
	// Amount to be paid for the purchase
	Amount *float64
	// Payment status
	PaymentStatus *string
}

var (
	// PaymentManagementMap is a map of attribute names in result type
	// PaymentManagement indexed by view name.
	PaymentManagementMap = map[string][]string{
		"default": []string{
			"userId",
			"amount",
			"paymentStatus",
		},
	}
)

// ValidatePaymentManagement runs the validations defined on the viewed result
// type PaymentManagement.
func ValidatePaymentManagement(result *PaymentManagement) (err error) {
	switch result.View {
	case "default", "":
		err = ValidatePaymentManagementView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidatePaymentManagementView runs the validations defined on
// PaymentManagementView using the "default" view.
func ValidatePaymentManagementView(result *PaymentManagementView) (err error) {
	if result.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "result"))
	}
	return
}
